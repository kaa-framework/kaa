switch ($entityClass) {
{% for entity in entities %}
    case \{{ entity.entityClass }}::class:
        $query = '
            SELECT
            {% for field in entity.fields %}
                {# @var field \Kaa\Component\Database\Dto\FieldMetadata #}
                {{ field.columnName }}{{ not loop.last ? ',' }}
            {% endfor %}
            {{ not entity.manyToOne is empty ? ',' }}
            {% for mto in entity.manyToOne %}
                {{ mto.columnName }}{{ not loop.last ? ',' }}
            {% endfor %}

            FROM {{ entity.tableName }}
            WHERE
        ';

        $where = [];
        foreach ($criteria as $field => $value) {
            switch ($field) {
                {% for field in entity.fields %}
                    {# @var field \Kaa\Component\Database\Dto\FieldMetadata #}
                    case '{{ field.name }}':
                        if (is_string($value)) {
                            $where[] = "{{ field.columnName }} = '" . $value . "'";
                        } else {
                            $where[] = "{{ field.columnName }} = " . $value;
                        }

                        break;
                {% endfor %}
                {% for mto in entity.manyToOne %}
                    {# @var field \Kaa\Component\Database\Dto\FieldMetadata #}
                    case '{{ mto.fieldName }}':
                        $where[] = "{{ mto.columnName }} = " . $value;
                        break;
                {% endfor %}
                    default:
                        throw new \Kaa\Component\Database\Exception\DatabaseException("Field {$field} does not exist in {{ entity.entityClass }}");
            }
        }

        if ($order !== []) {
            $query .= ' ORDER BY ';
            $orderBy = [];
            foreach ($criteria as $field => $value) {
                if ($value !== 'ASC' && $value !== 'DESC') {
                    throw new \Kaa\Component\Database\Exception\DatabaseException('Only "ASC" and "DESC" can be used as values in $order');
                }

                switch ($field) {
                {% for field in entity.fields %}
                    {# @var field \Kaa\Component\Database\Dto\FieldMetadata #}
                    case '{{ field.name }}':
                        $where[] = "{{ field.columnName }} " . $value;

                    break;
                {% endfor %}
                {% for mto in entity.manyToOne %}
                    {# @var field \Kaa\Component\Database\Dto\FieldMetadata #}
                    case '{{ mto.fieldName }}':
                        $where[] = "{{ mto.columnName }} = " . $value;
                    break;
                {% endfor %}
                    default:
                        throw new \Kaa\Component\Database\Exception\DatabaseException("Field {$field} does not exist in {{ entity.entityClass }}");
                }
            }

            $query .= implode(', ', $orderBy);
        }

        if ($limit !== null) {
            $query .= ' LIMIT ' . $limit;
        }

        if ($offset !== null) {
            $query .= ' OFFSET ' . $offset;
        }

        $query .= implode(' AND ', $where);

        $statement = $this->pdo->query($query);

        $entities = [];
        $results = $statement->fetchAll();
        foreach ($results as $result) {
            $uniqueId = '{{ entity.entityClass }}' . '#' . $result['{{ entity.idColumnName }}'];
            if (array_key_exists($uniqueId, $this->managedEntities)) {
                $entity = instance_cast($this->managedEntities[$uniqueId]->getEntity(), \{{ entity.entityClass }}::class);
                if (!$entity->_isInitialized()) {
                    $newManagedEntities = $entity->_hydrate($result, $this, $this->managedEntities);
                    foreach ($newManagedEntities as $newManagedEntity) {
                        $this->managedEntities[get_class($newManagedEntity) . '#' . $newManagedEntity->_getId()] = new \Kaa\Component\Database\Dto\EntityWithValueSet(
                        $newManagedEntity,
                        $newManagedEntity->_isInitialized() ? $newManagedEntity->_getValues() : []
                        );
                    }
                    $entity->_setInitialized();

                    $this->managedEntities[$uniqueId]->setValues($entity->_getValues());
                }

                $entities[] = $entity;
                continue;
            }

            $entity = new \Kaa\Generated\Database\Entity\{{ connection }}\{{ entity.className }}();
            $newManagedEntities = $entity->_hydrate($result, $this, $this->managedEntities);
            foreach ($newManagedEntities as $newManagedEntity) {
                $this->managedEntities[get_class($newManagedEntity) . '#' . $newManagedEntity->_getId()] = new \Kaa\Component\Database\Dto\EntityWithValueSet(
                    $newManagedEntity,
                    $newManagedEntity->_isInitialized() ? $newManagedEntity->_getValues() : []
                );
            }

            $this->managedEntities['{{ entity.entityClass }}' . '#' . $entity->_getId()] = new \Kaa\Component\Database\Dto\EntityWithValueSet(
                $entity,
                $entity->_getValues()
            );

            $entities[] = $entity;
            $result = $statement->fetch();
        }

        return $entities;
{% endfor %}
}

throw new \Kaa\Component\Database\Exception\DatabaseException("Entity {$entityClass} does not exist in connection {{ connection }}");
