switch ($entityClass) {
{% for entity in entities %}
    case \{{ entity.entityClass }}::class:
        $qb = $this->createQueryBuilder(\{{ entity.entityClass }}::class, 'e');

        $where = [];
        foreach ($criteria as $field => $value) {
            switch ($field) {
                {% for field in entity.fields %}
                    {# @var field \Kaa\Component\Database\Dto\FieldMetadata #}
                    case '{{ field.name }}':
                        if (is_string($value)) {
                            $where[] = \Kaa\Component\Database\QueryBuilder\Query\Expr::e("{{ field.columnName }} = '" . $value . "'");
                        } else {
                            $where[] = \Kaa\Component\Database\QueryBuilder\Query\Expr::e("{{ field.columnName }} = " . $value);
                        }

                        break;
                {% endfor %}
                {% for mto in entity.manyToOne %}
                    {# @var field \Kaa\Component\Database\Dto\FieldMetadata #}
                    case '{{ mto.fieldName }}':
                        $where[] = \Kaa\Component\Database\QueryBuilder\Query\Expr::e("{{ mto.columnName }} = " . $value);
                        break;
                {% endfor %}
                    default:
                        throw new \Kaa\Component\Database\Exception\DatabaseException("Field {$field} does not exist in {{ entity.entityClass }}");
            }
        }

        $qb->where(\Kaa\Component\Database\QueryBuilder\Query\Expr::and($where));


        if ($order !== []) {
            foreach ($criteria as $field => $value) {
                if ($value !== 'ASC' && $value !== 'DESC') {
                    throw new \Kaa\Component\Database\Exception\DatabaseException('Only "ASC" and "DESC" can be used as values in $order');
                }

                switch ($field) {
                {% for field in entity.fields %}
                    {# @var field \Kaa\Component\Database\Dto\FieldMetadata #}
                    case '{{ field.name }}':
                        $qb->addOrderBy("{{ field.columnName }}", $value);

                    break;
                {% endfor %}
                {% for mto in entity.manyToOne %}
                    {# @var field \Kaa\Component\Database\Dto\FieldMetadata #}
                    case '{{ mto.fieldName }}':
                        $qb->addOrderBy("{{ mto.columnName }}", $value);
                    break;
                {% endfor %}
                    default:
                        throw new \Kaa\Component\Database\Exception\DatabaseException("Field {$field} does not exist in {{ entity.entityClass }}");
                }
            }

        }

        if ($limit !== null) {
            $qb->setMaxResult($limit);
        }

        if ($offset !== null) {
            $qb->setFirstResult($offset);
        }

        return $qb->getResult(\{{ entity.entityClass }}::class);
{% endfor %}
}

throw new \Kaa\Component\Database\Exception\DatabaseException("Entity {$entityClass} does not exist in connection {{ connection }}");
