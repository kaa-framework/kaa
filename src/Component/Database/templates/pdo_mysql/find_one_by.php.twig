switch ($entityClass) {
{% for entity in entities %}
    case \{{ entity.entityClass }}::class:
        $query = '
            SELECT
            {% for field in entity.fields %}
                {# @var field \Kaa\Component\Database\Dto\FieldMetadata #}
                {{ field.columnName }}{{ not loop.last ? ',' }}
            {% endfor %}
            {{ not entity.manyToOne is empty ? ',' }}
            {% for mto in entity.manyToOne %}
                {{ mto.columnName }}{{ not loop.last ? ',' }}
            {% endfor %}

            FROM {{ entity.tableName }}
            WHERE
        ';

        $where = [];
        foreach ($criteria as $field => $value) {
            switch ($field) {
                {% for field in entity.fields %}
                    {# @var field \Kaa\Component\Database\Dto\FieldMetadata #}
                    case '{{ field.name }}':
                        if (is_string($value)) {
                            $where[] = "{{ field.columnName }} = '" . $value . "'";
                        } else {
                            $where[] = "{{ field.columnName }} = " . $value;
                        }

                        break;
                {% endfor %}
                {% for mto in entity.manyToOne %}
                    {# @var field \Kaa\Component\Database\Dto\FieldMetadata #}
                    case '{{ mto.fieldName }}':
                        $where[] = "{{ mto.columnName }} = " . $value;
                        break;
                {% endfor %}
                    default:
                        throw new \Kaa\Component\Database\Exception\DatabaseException("Field {$field} does not exist in {{ entity.entityClass }}");
            }
        }

        $query .= implode(' AND ', $where);

        $statement = $this->pdo->query($query);

        $result = $statement->fetch();
        if ($result === false) {
            return null;
        }

        $entity = new \Kaa\Generated\Database\Entity\{{ connection }}\{{ entity.className }}();
        $newManagedEntities = $entity->_hydrate($result, $this, $this->managedEntities);
        foreach ($newManagedEntities as $newManagedEntity) {
            $this->managedEntities[get_class($newManagedEntity) . '#' . $newManagedEntity->_getId()] = new \Kaa\Component\Database\Dto\EntityWithValueSet(
                $newManagedEntity,
                $newManagedEntity->_isInitialized() ? $newManagedEntity->_getValues() : []
            );
        }

        $this->managedEntities['{{ entity.entityClass }}' . '#' . $entity->_getId()] = new \Kaa\Component\Database\Dto\EntityWithValueSet(
            $entity,
            $entity->_getValues()
        );

        return $entity;
{% endfor %}
}

throw new \Kaa\Component\Database\Exception\DatabaseException("Entity {$entityClass} does not exist in connection {{ connection }}");
