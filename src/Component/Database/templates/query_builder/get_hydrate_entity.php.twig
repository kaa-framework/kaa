switch ($entityClass) {
    {% for entity in entities %}
    case \{{ entity.entityClass }}::class:
                $uniqueId = '{{ entity.entityClass }}' . '#' . $result['{{ entity.idColumnName }}'];
                if (array_key_exists($uniqueId, $this->entityManager->_getManagedEntities())) {
                    $entity = instance_cast($this->entityManager->_getManagedEntities()[$uniqueId]->getEntity(), \{{ entity.entityClass }}::class);
                    if (!$entity->_isInitialized()) {
                        $newManagedEntities = $entity->_hydrate($result, $this->entityManager, $this->entityManager->_getManagedEntities());
                        foreach ($newManagedEntities as $newManagedEntity) {
                            $this->entityManager->_addManagedEntity($newManagedEntity->_getEntityClassName() . '#' . $newManagedEntity->_getId(),  (new \Kaa\Component\Database\Dto\EntityWithValueSet(
                            $newManagedEntity,
                            $newManagedEntity->_isInitialized() ? $newManagedEntity->_getValues() : []
                            )));
                        }

                        /** @var array<string, int[]> $oneToManyIds */
                        $oneToManyIds = [];
                        {% for oneToMany in entity.oneToMany %}
                            {# @var oneToMany \Kaa\Component\Database\Dto\OneToManyMetadata #}
                            $subQuery = '
                            SELECT DISTINCT({{ oneToMany.targetEntityIdColumnName }}) AS id
                            FROM {{ oneToMany.targetEntityTable }}
                            WHERE {{ oneToMany.referenceColumnName }} = %s
                            ';

                            $subQuery = sprintf($subQuery, $entity->_getId());

                            $subStatement = $this->entityManager->_getPdo()->query($subQuery);
                            $subResults = $subStatement->fetchAll();
                            $oneToManyIds['{{ oneToMany.fieldName }}'] = [];
                            foreach($subResults as $subResult) {
                                $oneToManyIds['{{ oneToMany.fieldName }}'][] = (int) $subResult['id'];
                            }
                        {% endfor %}

                        $newManagedEntities = $entity->_hydrateOneToMany($oneToManyIds, $this->entityManager, $this->entityManager->_getManagedEntities());
                        foreach ($newManagedEntities as $newManagedEntity) {
                            $this->entityManager->_addManagedEntity($newManagedEntity->_getEntityClassName() . '#' . $newManagedEntity->_getId(), (new \Kaa\Component\Database\Dto\EntityWithValueSet(
                            $newManagedEntity,
                            $newManagedEntity->_isInitialized() ? $newManagedEntity->_getValues() : []
                            )));
                        }

                        $entity->_setInitialized();

                        $this->entityManager->_getManagedEntities()[$uniqueId]->setValues($entity->_getValues());
                    }

                } else {
                $entity = new \Kaa\Generated\Database\Entity\{{ connection }}\{{ entity.className }}();
                $newManagedEntities = $entity->_hydrate($result, $this->entityManager, $this->entityManager->_getManagedEntities());
                foreach ($newManagedEntities as $newManagedEntity) {
                    $this->entityManager->_addManagedEntity($newManagedEntity->_getEntityClassName() . '#' . $newManagedEntity->_getId(),  (new \Kaa\Component\Database\Dto\EntityWithValueSet(
                    $newManagedEntity,
                    $newManagedEntity->_isInitialized() ? $newManagedEntity->_getValues() : []
                    )));
                }

                /** @var array<string, int[]> $oneToManyIds */
                $oneToManyIds = [];
                {% for oneToMany in entity.oneToMany %}
                    {# @var oneToMany \Kaa\Component\Database\Dto\OneToManyMetadata #}
                    $subQuery = '
                        SELECT DISTINCT({{ oneToMany.targetEntityIdColumnName }}) AS id
                        FROM {{ oneToMany.targetEntityTable }}
                        WHERE {{ oneToMany.referenceColumnName }} = %s
                    ';

                $subQuery = sprintf($subQuery, $entity->_getId());

                $subStatement = $this->entityManager->_getPdo()->query($subQuery);
                $subResults = $subStatement->fetchAll();
                $oneToManyIds['{{ oneToMany.fieldName }}'] = [];
                foreach($subResults as $subResult) {
                    $oneToManyIds['{{ oneToMany.fieldName }}'][] = (int) $subResult['id'];
                }
                {% endfor %}

                $newManagedEntities = $entity->_hydrateOneToMany($oneToManyIds, $this->entityManager, $this->entityManager->_getManagedEntities());
                foreach ($newManagedEntities as $newManagedEntity) {
                    $this->entityManager->_addManagedEntity($newManagedEntity->_getEntityClassName() . '#' . $newManagedEntity->_getId(), (new \Kaa\Component\Database\Dto\EntityWithValueSet(
                    $newManagedEntity,
                    $newManagedEntity->_isInitialized() ? $newManagedEntity->_getValues() : []
                    )));
                }

                $this->entityManager->_addManagedEntity('{{ entity.entityClass }}' . '#' . $entity->_getId(),  (new \Kaa\Component\Database\Dto\EntityWithValueSet(
                $entity,
                $entity->_getValues()
                )));

            }

            return $entity;


    {% endfor %}
}

throw new \Kaa\Component\Database\Exception\DatabaseException("Entity {$entityClass} does not exist in connection {{ connection }}");